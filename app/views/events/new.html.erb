<html>
  <head>
  </head>

<body>
<div class = "col-xs-8 col-xs-offset-2 space-top card" id="event-form">
  <div class = "col-xs-10 col-xs-offset-1 space-top">

    <div class="row">
      <h2>Report An Event</h2>

        <div class="row">
          <input id="pac-input" class="controls pull left" type="text"
      placeholder="Enter a location">
          <div id="map-small" class="pull right">
        </div>
      </div>

    </div>

    <div class="form-group">
      <%= form_for(@event, url:"/users/#{current_user.id}/events",:html => {class: "form-horizontal", role: "form"}) do |f| %>
        <%= render :partial => 'eventform', :locals => {:f => f} %>
      <% end %>
    </div>
  </div>
</div>


<script>
function initMap() {
  var map = new google.maps.Map(document.getElementById('map-small'), {
    center: {lat: -33.8688, lng: 151.2195},
    zoom: 13
  });
  var input = /** @type {!HTMLInputElement} */(
      document.getElementById('pac-input'));

  var types = document.getElementById('type-selector');
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

  var autocomplete = new google.maps.places.Autocomplete(input);
  autocomplete.bindTo('bounds', map);

  var infowindow = new google.maps.InfoWindow();
  var marker = new google.maps.Marker({
    map: map,
    anchorPoint: new google.maps.Point(0, -29)
  });

  autocomplete.addListener('place_changed', function() {
    infowindow.close();
    marker.setVisible(false);
    var place = autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }

    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);  // Why 17? Because it looks good.
    }
    marker.setIcon(/** @type {google.maps.Icon} */({
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(35, 35)
    }));
    marker.setPosition(place.geometry.location);
    marker.setVisible(true);

    var address = '';
    if (place.address_components) {
      address = [
        (place.address_components[0] && place.address_components[0].short_name || ''),
        (place.address_components[1] && place.address_components[1].short_name || ''),
        (place.address_components[2] && place.address_components[2].short_name || '')
      ].join(' ');
    }

    infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
    infowindow.open(map, marker);
  });

  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  function setupClickListener(id, types) {
    var radioButton = document.getElementById(id);
    radioButton.addEventListener('click', function() {
      autocomplete.setTypes(types);
    });
  }

  setupClickListener('changetype-all', []);
  setupClickListener('changetype-address', ['address']);
  setupClickListener('changetype-establishment', ['establishment']);
  setupClickListener('changetype-geocode', ['geocode']);
}
</script>
<script src="//maps.google.com/maps/api/js?v=3.23&key=AIzaSyBfCRSEfQ6vvMOgm6JXb7XgqSrSDlWE7Ss&libraries=geometry,places&callback=initMap" type="text/javascript">
</script>
</body>
</html>
